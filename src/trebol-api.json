{
    "openapi": "3.0.1",
    "info": {
        "title": "Trébol eCommerce API",
        "version": "1.7.2",
        "description": "A collection of resources that the Trébol backend exposes to interact with. Depends on, and references `Trébol eCommerce API Commons v1.0.0`",
        "contact": {
            "name": "Benjamin La Madrid",
            "email": "bg.lamadrid@gmail.com"
        },
        "license": {
            "name": "GNU GPLv3",
            "url": "https://www.gnu.org/licenses/gpl.txt"
        }
    },
    "tags": [
        {
            "name": "authorization"
        },
        {
            "name": "preflight"
        },
        {
            "name": "transaction"
        },
        {
            "name": "metadata"
        },
        {
            "name": "account"
        },
        {
            "name": "session"
        },
        {
            "name": "create"
        },
        {
            "name": "read-one"
        },
        {
            "name": "read-many"
        },
        {
            "name": "update"
        },
        {
            "name": "partial-update"
        },
        {
            "name": "delete"
        },
        {
            "name": "billing-types"
        },
        {
            "name": "customers"
        },
        {
            "name": "images"
        },
        {
            "name": "products"
        },
        {
            "name": "product-categories"
        },
        {
            "name": "product-lists"
        },
        {
            "name": "people"
        },
        {
            "name": "sales"
        },
        {
            "name": "salespeople"
        },
        {
            "name": "shippers"
        },
        {
            "name": "users"
        },
        {
            "name": "user-roles"
        }
    ],
    "paths": {
        "/access": {
            "summary": "Allowed (authorized) access to API routes",
            "description": "Operation that hints the API consumer on what paths, routes, or resources can be accessed in the /data API.",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToRoutes"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-routes-get",
                "summary": "Query allowed API routes",
                "description": "GET the API resource paths that the current session is authorized to use."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "access-routes-options",
                "summary": "Preflight check for API resource accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access/{resource}": {
            "summary": "Authorized access to a certain resource",
            "description": "Operation that hints the API consumer on what actions can be performed against another resource in the /data API.",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToResource"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-resource-actions-get",
                "summary": "Query allowed API operations on the resource",
                "description": "GET operations that the current user is authorized to request against the resource."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "access-resource-options",
                "summary": "Preflight check for resource operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "resource",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/data/customers": {
            "summary": "Customer data API endpoint",
            "description": "Operations to fetch, create, edit and remove customers and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "customers"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of customers per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Customer property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customers-get",
                "summary": "List customers",
                "description": "GET a paged collection of customers."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "customers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customers-put",
                "summary": "Update customers",
                "description": "PUT changes to all customers matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "customers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customers-post",
                "summary": "Insert new customers",
                "description": "POST new customer entities and save them to the data store."
            },
            "delete": {
                "tags": [
                    "delete",
                    "customers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customers-delete",
                "summary": "Delete customers",
                "description": "DELETE customers matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-customers-options",
                "summary": "Preflight check for non-specific customer API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "idNumber",
                    "description": "The unique identifying number of the customer. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "name",
                    "description": "The exact name of the customer. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "idNumberLike",
                    "description": "A portion of the customer's identifying number. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the customer's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "email",
                    "description": "The exact email address of the customer. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "emailLike",
                    "description": "A portion of the customer's email address. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/people": {
            "summary": "Person data API endpoint",
            "description": "Operations to fetch people data. \nEditing operations cannot be done through this resource.",
            "get": {
                "tags": [
                    "read-many",
                    "people"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of people per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "People property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "People sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-people-get",
                "summary": "List people",
                "description": "GET a paged collection of people."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "access-people-options",
                "summary": "Preflight check for people API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/products": {
            "summary": "Product data API endpoint",
            "description": "Operations to fetch, create, edit and remove products and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "products"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of products per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Product property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Product sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    }
                },
                "operationId": "data-products-get",
                "summary": "List products",
                "description": "GET a paged collection of products."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "products"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-products-put",
                "summary": "Update products",
                "description": "PUT changes to all products matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "products"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-products-post",
                "summary": "Insert new products",
                "description": "POST a new product entity and save it to the data store"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "products"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-products-patch",
                "summary": "Partially update a product",
                "description": "PATCH changes to the product matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "products"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-products-delete",
                "summary": "Delete products",
                "description": "DELETE products matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-products-options",
                "summary": "Preflight check for non-specific product API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "barcode",
                    "description": "The exact barcode of the product. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "barcodeLike",
                    "description": "A portion of the product's barcode. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "name",
                    "description": "The exact name of the product. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion the product's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "categoryCode",
                    "description": "The exact code of the product's category. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "categoryCodeLike",
                    "description": "A portion of the product category's code. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/sales": {
            "summary": "Sell data API endpoint",
            "description": "Operations to fetch, create, edit and remove sales and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "sales"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of sales per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Sell property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Sell sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "date",
                        "description": "The exact date & time of transaction. If invoked, `afterDate` and `beforeDate` parameters are ignored.",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "afterDate",
                        "description": "Minimum date & time to account transactions by (datetime range start)",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "in": "query"
                    },
                    {
                        "name": "beforeDate",
                        "description": "Limit date & time to account transactions by (datetime range end)",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "in": "query"
                    },
                    {
                        "name": "statusCode",
                        "description": "Numeric status code (such as pending, paid, delivered)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-get",
                "summary": "List sales",
                "description": "GET a paged collection of sales."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-put",
                "summary": "Update sales",
                "description": "PUT changes to all sales matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-post",
                "summary": "Insert new sales",
                "description": "POST a new sell entity and save it to the data store."
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SellProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-patch",
                "summary": "Partially update a sell",
                "description": "PATCH changes into a sell matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-delete",
                "summary": "Delete sales",
                "description": "DELETE sales matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-sales-options",
                "summary": "Preflight check for non-specific sell API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "buyOrder",
                    "description": "The unique number associated to a sell.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/sales/confirmation": {
            "summary": "Sell confirmation API endpoint",
            "description": "Operation to mark sales/orders as confirmed.",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-confirmation-post",
                "summary": "Confirm sales",
                "description": "POST confirmation of a given order"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "data-sales-confirmation-options",
                "summary": "Preflight check for sell confirmation API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/sales/rejection": {
            "summary": "Sell rejection API endpoint",
            "description": "Operation to mark sales/orders as rejected.",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-rejection-post",
                "summary": "Reject sales",
                "description": "POST rejection of a given order"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "data-sales-rejection-options",
                "summary": "Preflight check for sell rejection API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/sales/completion": {
            "summary": "Sell completion API endpoint",
            "description": "Operation to mark sales/orders as completed/delivered.",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "sales"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-sales-completion-post",
                "summary": "Finish completed sales",
                "description": "POST completion of a given order"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "data-sales-completion-options",
                "summary": "Preflight check for sell completion API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },

        "/data/users": {
            "summary": "User data API endpoint",
            "description": "Operations to fetch, create, edit and remove users and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "users"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of users per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "User property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "User sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-users-get",
                "summary": "List users",
                "description": "GET a paged collection of users."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "users"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-users-put",
                "summary": "Update users",
                "description": "PUT changes to all users matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "users"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-users-post",
                "summary": "Insert new users",
                "description": "POST a new user entity and save it to the data store."
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "users"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-users-patch",
                "summary": "Partial update an user",
                "description": "PATCH changes into the user matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "users"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-users-delete",
                "summary": "Delete users",
                "description": "DELETE users matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-users-options",
                "summary": "Preflight check for non-specific user API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "name",
                    "description": "The exact name of the user. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the user's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "emailLike",
                    "description": "A portion of the user's email address. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/images": {
            "summary": "Image data API endpoint",
            "description": "Operations to fetch, create, edit and remove images and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "images"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of images per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Sort order (ascending/descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-images-get",
                "summary": "List images",
                "description": "GET a paged collection of images."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Image"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "images"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-images-put",
                "summary": "Update images",
                "description": "PUT changes to all images matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Image"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "images"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-images-post",
                "summary": "Insert new images",
                "description": "POST a new image entity and save it to the data store"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "images"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-images-patch",
                "summary": "Partially update an image",
                "description": "PATCH changes into the image tahat matches the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "images"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-images-delete",
                "summary": "Delete images",
                "description": "DELETE images matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-images-options",
                "summary": "Preflight check for non-specific image API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/user_roles": {
            "summary": "User role data API endpoint",
            "description": "Operations to fetch user roles data. \nEditing operations cannot be done through this resource.",
            "get": {
                "tags": [
                    "read-many",
                    "user-roles"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a list of user roles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserRole"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-user-roles-get",
                "summary": "List all user roles",
                "description": "GET every user role available."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-user-roles-options",
                "summary": "Preflight check for user roles API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/about": {
            "summary": "Info on the shop",
            "description": "Public resource for general information about the company behind the shop.",
            "get": {
                "tags": [
                    "metadata"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShopOwnerDetails"
                                }
                            }
                        },
                        "description": "Normal response. Sends an object containing information about the shop."
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "metadata-get",
                "summary": "Request info on the shop",
                "description": "GET general information regarding the company behind the shop."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "metadata-options",
                "summary": "Preflight check for shop information",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/checkout": {
            "summary": "Payment request",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CartDetail"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "transaction"
                ],
                "parameters": [
                    {
                        "examples": {
                            "Webpay": {
                                "value": "\"webpay\""
                            }
                        },
                        "name": "method",
                        "description": "The payment method requested by the user.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRedirection"
                                }
                            }
                        },
                        "description": "Normal response. The transaction was acknowledged and initiated. Details to redirect towards the payment page are included."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "checkout-request",
                "summary": "Send a payment request",
                "description": "POST cart details to initiate a virtual transaction in the shop."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "checkout-options",
                "summary": "Preflight check for payment request",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/checkout/validate": {
            "summary": "Payment confirmation for a 'Pending' transaction.",
            "post": {
                "tags": [
                    "transaction"
                ],
                "responses": {
                    "303": {
                        "description": "Normal, empty response, sent when the transaction was approved. Redirects the user.\n\n'Location' response header should be included with a URL to the result page."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "validate-checkout-request",
                "summary": "Send payment result",
                "description": "POST (ping) response from the payment method to confirm the transaction end result."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "validate-checkout-options",
                "summary": "Preflight check for payment confirmation",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/receipt/{code}": {
            "summary": "Fetch details about a transaction",
            "get": {
                "tags": [
                    "transaction"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a receipt.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Receipt"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "store-receipt-request",
                "summary": "Find specific transaction receipt",
                "description": "GET complete public information about a transaction, matched by its ID, code, or whatever unique property is used to identify it."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "store-receipt-options",
                "summary": "Preflight check for specific transaction receipt",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "The transaction identifier",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/product_categories": {
            "summary": "Product category data API endpoint",
            "description": "Operations to fetch, create, edit and remove product categories and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "product-categories"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a list of product categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductCategory"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-product-categories-get",
                "summary": "List product categories",
                "description": "GET a paged collection of product categories.\nBy default, it fetches parent-less categories first."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductCategory"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "product-categories"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-categories-put",
                "summary": "Update product categories",
                "description": "PUT changes to all product categories matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductCategory"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "product-categories"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-categories-post",
                "summary": "Insert new product categories",
                "description": "POST a new product category entity and save it to the data store."
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductCategoryProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "product-categories"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-categories-patch",
                "summary": "Partially update a product category",
                "description": "PATCH changes into the product category matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "product-categories"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-categories-delete",
                "summary": "Delete product categories",
                "description": "DELETE product categories matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-product-categories-options",
                "summary": "Preflight check for root product categories API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "parentCode",
                    "description": "The code of a parent category. If left empty, no exclusions are made.\n\nValid numbers exclude root categories.\n`null` makes it so only root categories are included.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": false
                },
                {
                    "name": "code",
                    "description": "The code of the category.\nWhen specified, rules out all other query parameters.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "name",
                    "description": "The exact name of the category. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the category's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/account/profile": {
            "summary": "User profile information",
            "description": "Operations against the current user's profile.",
            "get": {
                "tags": [
                    "read-one",
                    "account"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a Person object containing data about the user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "profile-get",
                "summary": "Fetch current user's profile",
                "description": "GET the current user's stored profile information"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "account"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "profile-put",
                "summary": "Update current user's profile",
                "description": "PUT changes into the current user's profile information."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "profile-options",
                "summary": "Preflight check for user profile information",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/guest": {
            "summary": "Guest session opener",
            "description": "",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "account",
                    "session"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response; a guest token was generated. It is included in the response headers and body."
                    },
                    "403": {
                        "description": "Erroneous, empty response to improper use; the user was already logged in or using a valid guest token."
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "guest-session-request",
                "summary": "Start a guest session",
                "description": "POST personal information to generate a token for a temporary guest session."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "guest-session-options",
                "summary": "Preflight check for guest session opener",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/login": {
            "summary": "Session opener",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginCredentials"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "account",
                    "session"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response; the credentials are correct, and an authorization token was generated. It is included in the response headers and body."
                    },
                    "403": {
                        "description": "Erroneous, empty response, sent when the credentials are rejected."
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "login-request",
                "summary": "Start a logged-in session",
                "description": "POST credentials to authenticate, generate an authorization token and start a new session."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "login-options",
                "summary": "Preflight check for session opener",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/register": {
            "summary": "Account registrar",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "account"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "register-request",
                "summary": "Request a new user account",
                "description": "POST details for a new user account, including its profile information."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "register-options",
                "summary": "Preflight check for account registrar",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/billing_types": {
            "summary": "Billing types API endpoint",
            "description": "Operations to fetch billing types data. \nEditing operations cannot be done through this resource.",
            "get": {
                "tags": [
                    "read-many",
                    "billing-types"
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a list of billing types.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BillingType"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-billing-types-get",
                "summary": "List all billing types",
                "description": "GET every billing type available."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-billing-types-options",
                "summary": "Preflight check for billing types API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/salespeople": {
            "summary": "Salesperson data API endpoint",
            "description": "Operations to fetch, create, edit and remove salespeople and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "salespeople"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of salespeople per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Salesperson property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Salesperson sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-salespeople-get",
                "summary": "List salespeople",
                "description": "GET a paged collection of salespeople."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Salesperson"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "salespeople"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-salespeople-put",
                "summary": "Update salespeople",
                "description": "PUT changes to all salespeople matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Salesperson"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "salespeople"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-salespeople-post",
                "summary": "Insert new salespeople",
                "description": "POST a new salesperson entity and save it to the data store."
            },
            "delete": {
                "tags": [
                    "delete",
                    "salespeople"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-salespeople-delete",
                "summary": "Delete salespeople",
                "description": "DELETE salespeople matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-salespeople-options",
                "summary": "Preflight check for non-specific salesperson API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "idNumber",
                    "description": "The unique identifying number of the salesperson. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "name",
                    "description": "The exact name of the salesperson. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "idNumberLike",
                    "description": "A portion of the salesperson's identifying number. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the salesperson's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "email",
                    "description": "The exact email address of the salesperson. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "emailLike",
                    "description": "A portion of the salesperson's email address. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/shippers": {
            "summary": "User data API endpoint",
            "description": "Operations to fetch, create, edit and remove users and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "shippers"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of users per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "User property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "User sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "data-shippers-get",
                "summary": "List shippers",
                "description": "GET a paged collection of shippers."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Shipper"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "shippers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-shippers-put",
                "summary": "Update shippers",
                "description": "PUT changes to all shippers matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Shipper"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "shippers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-shippers-post",
                "summary": "Insert new shippers",
                "description": "POST a new shipper entity and save it to the data store."
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ShipperProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "shippers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-shippers-patch",
                "summary": "Partially update a shipper",
                "description": "PATCH changes into the shipper matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "shippers"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-shippers-delete",
                "summary": "Delete shippers",
                "description": "DELETE shippers matching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-shippers-options",
                "summary": "Preflight check for shipper API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "name",
                    "description": "The exact name of the shipper. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the shipper's name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/product_lists": {
            "summary": "Product list data API endpoint",
            "description": "Operations to fetch, create, edit and remove product lists and their metadata.",
            "get": {
                "tags": [
                    "read-many",
                    "product-lists"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of lists per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "List property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Lists sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "code",
                        "description": "The exact code of a list. Case sensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "name",
                        "description": "The exact name of a list. Case sensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "codeLike",
                        "description": "A portion of a list's code. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "nameLike",
                        "description": "A portion of a list's name. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Normal response containing a list of product lists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductList"
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "data-product-lists-get",
                "summary": "List product lists",
                "description": "GET a paged collection of product lists."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductList"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-lists-put",
                "summary": "Update product lists",
                "description": "PUT changes to all product lists matching the provided query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductList"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-lists-post",
                "summary": "Insert new product lists",
                "description": "POST a new product list entity and save it to the data store."
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductListProperties"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "partial-update",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-lists-patch",
                "summary": "Partially update a product list",
                "description": "PATCH changes to the product list matching the provided query parameters."
            },
            "delete": {
                "tags": [
                    "delete",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-lists-delete",
                "summary": "Delete product lists",
                "description": "DELETE product listsmatching the provided query parameters, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-product-lists-options",
                "summary": "Preflight check for root product lists API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "The exact code of the list",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "name",
                    "description": "The exact name of the list. Case sensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "nameLike",
                    "description": "A portion of the list name. Case insensitive.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/data/product_list_contents": {
            "summary": "Product list contents data API endpoint",
            "description": "Operations to fetch and edit contents of specific product lists.",
            "get": {
                "tags": [
                    "read-many",
                    "product-lists"
                ],
                "parameters": [
                    {
                        "name": "pageSize",
                        "description": "Number of products per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "pageIndex",
                        "description": "Index of page (0-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Product property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Product sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "productCode",
                        "description": "The exact code of a product. Case sensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "productCodeLike",
                        "description": "A portion of a product's code. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "productNameLike",
                        "description": "A portion of a product's name. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    }
                },
                "operationId": "data-product-list-contents-get",
                "summary": "Fetch products stored in a list",
                "description": "GET a paged collection of product within a list's contents."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-list-contents-put",
                "summary": "Update full contents of a list",
                "description": "PUT provided products to replace the entire contents of the list."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "product-lists"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-list-contents-post",
                "summary": "Insert product into a list",
                "description": "POST a product entity and save it to the list."
            },
            "delete": {
                "tags": [
                    "delete",
                    "product-lists"
                ],
                "parameters": [
                    {
                        "name": "productCode",
                        "description": "The exact code of a product. Case sensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "productCodeLike",
                        "description": "A portion of a product's code. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "productNameLike",
                        "description": "A portion of a product's name. Case insensitive.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-product-list-contents-delete",
                "summary": "Remove products from a list",
                "description": "DELETE products matching the provided query parameters, from the list."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowAllMethods"
                    }
                },
                "operationId": "data-product-list-contents-options",
                "summary": "Preflight check for root product lists API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "listCode",
                    "description": "The exact code of the list",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "DataPage": {
                "title": "Root Type for DataPage",
                "description": "A pageable representation of data.",
                "type": "object",
                "properties": {
                    "items": {
                        "description": "The contents of the page.",
                        "type": "array",
                        "items": {}
                    },
                    "pageIndex": {
                        "description": "The index of the page (0-based)",
                        "type": "integer"
                    },
                    "totalCount": {
                        "description": "The total amount of items matched under the same search criteria.",
                        "type": "integer"
                    },
                    "pageSize": {
                        "description": "The amount of items that any page may have.",
                        "type": "integer"
                    }
                },
                "example": {
                    "items": [
                        {
                            "name": "example product",
                            "code": "EXMPL001"
                        },
                        {
                            "name": "example product 2",
                            "code": "EXMPL002"
                        }
                    ],
                    "pageIndex": 2,
                    "totalCount": 32,
                    "pageSize": 15
                }
            },
            "LoginCredentials": {
                "title": "Root Type for LoginCredentials",
                "description": "Data sent by an user to authenticate themselves.",
                "required": [
                    "name",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The user name.",
                        "type": "string"
                    },
                    "password": {
                        "description": "The user password.",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "an username",
                    "password": "a password"
                }
            },
            "UserRegistration": {
                "title": "Root Type for UserRegistration",
                "description": "Credentials and personal information for a new user account.",
                "required": [
                    "password",
                    "profile",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "example": {
                    "password": "some text",
                    "profile": {
                        "name": "some text",
                        "idNumber": "some text",
                        "email": "some text",
                        "phone1": "+1111111111",
                        "phone2": "+22 222 222 22"
                    },
                    "name": "some text"
                }
            },
            "AuthorizedAccess": {
                "title": "Root Type for AuthorizedAcess",
                "description": "A generic container of API resource paths or actions on a specific resource, for which access is granted",
                "type": "object",
                "properties": {
                    "routes": {
                        "description": "A list of authorized routes to consume.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "permissions": {
                        "description": "A list of authorized actions for a specific route.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "routes": [
                        "clients",
                        "products",
                        "people",
                        "sales",
                        "salespeople",
                        "users"
                    ]
                }
            },
            "PersonProperties": {
                "type": "object",
                "properties": {
                    "email": {
                        "description": "The e-mail address.",
                        "type": "string"
                    },
                    "phone1": {
                        "description": "The preferred personal phone number",
                        "pattern": "^(\\(\\+?(\\d{3}|\\d{2} ?\\d)\\)|\\+?\\d{3}|\\+?\\d{2}[ -]?\\d)?[ -]?(\\d{8}|(\\d{2,4}[ -]?){2,4}|)$",
                        "type": "string"
                    },
                    "phone2": {
                        "description": "A second phone number",
                        "pattern": "^(\\(\\+?(\\d{3}|\\d{2} ?\\d)\\)|\\+?\\d{3}|\\+?\\d{2}[ -]?\\d)?[ -]?(\\d{8}|(\\d{2,4}[ -]?){2,4}|)$",
                        "type": "string"
                    },
                    "idNumber": {
                        "description": "The national identification number as issued by the individual's birth country government.",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "The individual's first name.",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "The individual's last or family name.",
                        "type": "string"
                    }
                }
            },
            "Person": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PersonProperties"
                    }
                ],
                "required": [
                    "idNumber",
                    "firstName",
                    "lastName",
                    "email"
                ],
                "description": "Personal information about an individual.",
                "example": {
                    "firstName": "Isaac Sebastian",
                    "lastName": "Williams McGregor",
                    "idNumber": "123456789-0",
                    "email": "example@email.com",
                    "phone1": "(+512)784 876 823",
                    "phone2": "4444 9820"
                }
            },
            "CartDetail": {
                "title": "Root Type for CartDetail",
                "description": "Representation of data about a single product within a shopping cart.",
                "required": [
                    "units",
                    "product"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "units": {
                        "description": "The amount, or quantity of the related product.",
                        "type": "integer"
                    }
                },
                "example": {
                    "product": {
                        "name": "example product",
                        "barcode": "EXMPL000001",
                        "price": 1000
                    },
                    "units": 1
                }
            },
            "ImageProperties": {
                "type": "object",
                "properties": {
                    "filename": {
                        "description": "The file name of the image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL to find the image at.",
                        "type": "string"
                    },
                    "code": {
                        "description": "Unique identifier of the image. Allows URL-compatible characters only.",
                        "type": "string"
                    }
                }
            },
            "Image": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ImageProperties"
                    }
                ],
                "required": [
                    "filename",
                    "url",
                    "code"
                ],
                "description": "A reference to an image that can be found following a given URL.",
                "example": {
                    "filename": "test.png",
                    "url": "http://localhost:80/examplePath",
                    "code": "TESTIMAGE"
                }
            },
            "PaymentRedirection": {
                "title": "Root Type for PaymentRedirection",
                "description": "Metadata used to redirect the user towards a payment method.",
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "description": "The url to access the payment service and undergo the transaction process.",
                        "type": "string"
                    }
                },
                "example": {
                    "url": "https://payment.com",
                    "token_ws": "a.token.that.the.payment.method.created.and.recognizes"
                }
            },
            "ProductProperties": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The given name of the product.",
                        "type": "string"
                    },
                    "barcode": {
                        "description": "A unique identifier for the product. Normally issued by an external ERP service.",
                        "type": "string"
                    },
                    "price": {
                        "description": "The price of the product, valued by the store's local currency.",
                        "type": "number"
                    },
                    "images": {
                        "description": "A list of images that illustrate this product.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Image"
                        }
                    },
                    "code": {
                        "description": "A unique identifier for the product. Read-only after creation.",
                        "type": "string"
                    },
                    "category": {
                        "$ref": "#/components/schemas/ProductCategory"
                    },
                    "description": {
                        "description": "A summary of the product qualities",
                        "type": "string"
                    }
                }
            },
            "Product": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ProductProperties"
                    }
                ],
                "required": [
                    "name",
                    "barcode",
                    "price"
                ],
                "description": "A physical item or a service that the shop offers to the public.",
                "example": {
                    "name": "example product",
                    "barcode": "EXMPL00001",
                    "category": {
                        "name": "example product category"
                    },
                    "price": 1000,
                    "images": [
                        {
                            "url": "http://placeholder.org/example_photo.jpg",
                            "filename": "example_photo.jpg"
                        },
                        {
                            "url": "https://cdn.org/example_hash_uri",
                            "filename": "second_example.png"
                        }
                    ]
                }
            },
            "Receipt": {
                "title": "Root Type for Receipt",
                "description": "Metadata about an existing transaction.",
                "required": [
                    "totalValue",
                    "buyOrder",
                    "date",
                    "status",
                    "totalItems",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "buyOrder": {
                        "description": "The unique identifier for the transaction.",
                        "type": "integer"
                    },
                    "totalValue": {
                        "description": "The total value paid in the receipt.",
                        "type": "number"
                    },
                    "status": {
                        "description": "The current status of the transaction.",
                        "type": "string"
                    },
                    "date": {
                        "format": "date",
                        "description": "The timestamp at which the transaction was confirmed.",
                        "type": "string"
                    },
                    "details": {
                        "description": "List of all acquired products or services.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptDetail"
                        }
                    },
                    "taxValue": {
                        "description": "The paid amount that was destined to taxes.",
                        "type": "number"
                    },
                    "totalItems": {
                        "description": "The sum amount of product units purchased.",
                        "type": "integer"
                    },
                    "token": {
                        "description": "An unique code that identifies the transaction.",
                        "type": "string"
                    },
                    "transportValue": {
                        "description": "The amount paid for transport.",
                        "type": "number"
                    }
                },
                "example": {
                    "buyOrder": 1,
                    "totalValue": 11000,
                    "taxValue": 1000,
                    "transportValue": 0,
                    "status": "complete",
                    "date": "2020-12-25 15:40:53 GMT",
                    "details": [
                        {
                            "product": {
                                "name": "example product",
                                "price": 5000
                            },
                            "units": 2
                        }
                    ]
                }
            },
            "ReceiptDetail": {
                "title": "Root Type for ReceiptDetail",
                "description": "Part of a receipt's contents, related to a given Product.",
                "required": [
                    "units",
                    "product",
                    "unitValue"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "units": {
                        "description": "The amount or quantity of the given product.",
                        "type": "integer"
                    },
                    "unitValue": {
                        "description": "A copy of the value for each unit of the product in the parent transaction.",
                        "type": "number"
                    }
                },
                "example": {
                    "product": {
                        "name": "example product",
                        "barcode": "EXMPL000001"
                    },
                    "units": 1,
                    "unitValue": 1000
                }
            },
            "ShopOwnerDetails": {
                "title": "Root Type for ShopOwnerDetails",
                "description": "Information about the shop owner(s).",
                "required": [
                    "name",
                    "logoImageURL"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "bannerImageURL": {
                        "type": "string"
                    },
                    "logoImageURL": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "example shop owner details",
                    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse arcu eros, semper id interdum ut, molestie ut ex. Nulla lobortis viverra tempor.",
                    "bannerImageURL": "https://example.com/banner.jpg",
                    "logoImageURL": "https://example.com/logo.jpg"
                }
            },
            "Customer": {
                "title": "Root Type for Customer",
                "description": "Store customers. They directly relate to Person's in a one-to-one relationship.",
                "required": [
                    "person"
                ],
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "example": {
                    "person": {
                        "name": "some text",
                        "idNumber": "some id number",
                        "email": "some email",
                        "phone1": "+11111111",
                        "phone2": "2222 2222"
                    }
                }
            },
            "Salesperson": {
                "title": "Root Type for Salesperson",
                "description": "Store vendors/workers. Like Customers, they relate to Person's in a one-to-one relationship they could, but should not collide.",
                "required": [
                    "person"
                ],
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "example": {
                    "person": {
                        "name": "some text",
                        "idNumber": "some text",
                        "email": "some text",
                        "phone1": "3333 3333",
                        "phone2": "44 44 44 44"
                    }
                }
            },
            "SellDetail": {
                "title": "Root Type for SellDetail",
                "description": "Representation of data about a single product within a single sell.",
                "required": [
                    "product",
                    "units"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "units": {
                        "description": "The amount of products in this detail.",
                        "type": "integer"
                    },
                    "unitValue": {
                        "description": "A copy of the value for each unit of the product in the parent transaction.",
                        "type": "number"
                    }
                },
                "example": {
                    "product": {
                        "barcode": "EXMPL000001"
                    },
                    "units": 1,
                    "unitValue": 1000
                }
            },
            "SellProperties": {
                "type": "object",
                "properties": {
                    "details": {
                        "description": "A list that provides full information about the acquired products or services.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SellDetail"
                        }
                    },
                    "billingType": {
                        "description": "The name of the chosen method for generating a bill of the sell.",
                        "type": "string"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "shippingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "shipper": {
                        "$ref": "#/components/schemas/Shipper"
                    },
                    "date": {
                        "format": "date-time",
                        "description": "(UTC) The date and time that the transaction was acknowledged.",
                        "type": "string"
                    },
                    "paymentType": {
                        "description": "The selected method for payment for this transaction.",
                        "type": "string"
                    },
                    "salesperson": {
                        "$ref": "#/components/schemas/Salesperson"
                    },
                    "billingCompany": {
                        "$ref": "#/components/schemas/BillingCompany"
                    },
                    "netValue": {
                        "description": "The total value derived from the products included at the moment of transaction.",
                        "type": "number"
                    },
                    "status": {
                        "description": "The step that the transaction is in.",
                        "type": "string"
                    },
                    "buyOrder": {
                        "description": "Unique transaction identifier.",
                        "type": "integer"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "taxValue": {
                        "description": "The amount of income destined to pay taxes.",
                        "type": "number"
                    },
                    "totalValue": {
                        "description": "The sum between net, transport and taxes values.",
                        "type": "number"
                    },
                    "totalItems": {
                        "description": "The sum amount of product units purchased.",
                        "type": "integer"
                    },
                    "token": {
                        "description": "An unique code that identifies the transaction.",
                        "type": "string"
                    },
                    "transportValue": {
                        "description": "The amount paid for transport.",
                        "type": "number"
                    }
                }
            },
            "Sell": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SellProperties"
                    }
                ],
                "required": [
                    "paymentType",
                    "details",
                    "date",
                    "customer"
                ],
                "description": "A transaction already requested or yet to be requested.",
                "example": {
                    "buyOrder": 1,
                    "details": [
                        {
                            "product": {
                                "barcode": "some text"
                            },
                            "units": 42
                        }
                    ],
                    "billingType": "some text",
                    "billingAddress": {
                        "firstLine": "some text",
                        "secondLine": "some text",
                        "city": "some text",
                        "municipality": "some text",
                        "postalCode": "some text",
                        "notes": "some text"
                    },
                    "billingCompany": {
                        "idNumber": "some text",
                        "name": "some text"
                    },
                    "shippingAddress": {
                        "firstLine": "some text",
                        "secondLine": "some text",
                        "city": "some text",
                        "municipality": "some text",
                        "postalCode": "some text",
                        "notes": "some text"
                    },
                    "shipper": {
                        "name": "some text"
                    },
                    "status": "Pending",
                    "date": "2018-02-10T09:30Z",
                    "paymentType": "some payment method",
                    "salesperson": {
                        "person": {
                            "idNumber": "some text"
                        }
                    },
                    "token": "ANSDg900viery9e",
                    "netValue": 549.99,
                    "taxValue": 30.15,
                    "transportValue": 0,
                    "totalValue": 580.14,
                    "totalItems": 42
                }
            },
            "UserProperties": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "A unique name that the user logs in with.",
                        "type": "string"
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "role": {
                        "description": "The name of the role this user has.",
                        "type": "string"
                    }
                }
            },
            "User": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserProperties"
                    }
                ],
                "required": [
                    "name"
                ],
                "description": "Identified users of the application",
                "example": {
                    "name": "an username",
                    "person": {
                        "idNumber": "xxxxxxxx"
                    }
                }
            },
            "UserRoleProperties": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "UserRole": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserRoleProperties"
                    }
                ],
                "required": [
                    "name"
                ],
                "description": "A user role holds permissions to consume certain APIs.",
                "example": {
                    "name": "example role",
                    "description": "this role has access to read most data, excepting users"
                }
            },
            "ProductCategoryProperties": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name displayed for the category.",
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/ProductCategoryProperties"
                    },
                    "code": {
                        "description": "A unique identifier for the category.",
                        "type": "string"
                    }
                }
            },
            "ProductCategory": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ProductCategoryProperties"
                    }
                ],
                "required": [
                    "name",
                    "code"
                ],
                "description": "A Product group/category. Each one can be divided into smaller subsets (ProductType).",
                "example": {
                    "code": 3,
                    "name": "example category",
                    "parent": {
                        "code": 2
                    }
                }
            },
            "Address": {
                "title": "Root Type for Address",
                "description": "Information about a physical address.",
                "required": [
                    "firstLine",
                    "municipality",
                    "city"
                ],
                "type": "object",
                "properties": {
                    "firstLine": {
                        "description": "The main line of address.",
                        "type": "string"
                    },
                    "secondLine": {
                        "description": "Further information of the address, such as apartment or office.",
                        "type": "string"
                    },
                    "city": {
                        "description": "The name of the city where the address is located.",
                        "type": "string"
                    },
                    "municipality": {
                        "description": "The province where the address is located.",
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "Sometimes called ZIP.",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Extra bits of information or comments. Mostly helpful to Shippers.",
                        "type": "string"
                    }
                },
                "example": {
                    "firstLine": "first line test",
                    "secondLine": "second line test",
                    "city": "city example",
                    "municipality": "municipality example",
                    "postalCode": "postal code test",
                    "notes": "lorem ipsum"
                }
            },
            "BillingCompany": {
                "title": "Root Type for BillingCompany",
                "description": "A company or similar organization, enabled to pay taxes.",
                "required": [
                    "idNumber"
                ],
                "type": "object",
                "properties": {
                    "idNumber": {
                        "description": "The national identification number for the company.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the organization.",
                        "type": "string"
                    }
                },
                "example": {
                    "idNumber": "some text",
                    "name": "some text"
                }
            },
            "ShipperProperties": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the representative.",
                        "type": "string"
                    }
                }
            },
            "ShipperRequiredProperties": {
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "Shipper": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ShipperProperties"
                    },
                    {
                        "$ref": "#/components/schemas/ShipperRequiredProperties"
                    }
                ],
                "description": "External representatives that handle shipping.",
                "example": {
                    "name": "some text"
                }
            },
            "BillingType": {
                "title": "Root Type of BillingType",
                "description": "Dictates taxes to be applied to a given Sell.",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name given to this billing type.",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "Enterprise Invoice"
                }
            },
            "ProductListProperties": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "description": "The total amount of products in the list",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Unique name of the list",
                        "type": "string"
                    },
                    "code": {
                        "description": "Unique code of the list",
                        "type": "string"
                    }
                }
            },
            "ProductListRequiredProperties": {
                "type": "object",
                "required": [
                    "code"
                ]
            },
            "ProductList": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ProductListProperties"
                    },
                    {
                        "$ref": "#/components/schemas/ProductListRequiredProperties"
                    }
                ],
                "description": "A named, editable collection of items.",
                "example": {
                    "name": "example list",
                    "code": "EXAMPLE001",
                    "items": [
                        {
                            "name": "example product",
                            "code": "EXMPL001"
                        },
                        {
                            "name": "example product 2",
                            "code": "EXMPL002"
                        }
                    ],
                    "pageIndex": 2,
                    "totalCount": 32,
                    "pageSize": 15
                }
            }
        },
        "responses": {
            "PaginatedCollection": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DataPage"
                        }
                    }
                },
                "description": "Normal response for most \"/data\" methods; sends items in an array, along with pagination metadata."
            },
            "Forbidden": {
                "description": "Erroneous, empty response for requests not meeting security requirements. Most likely, it does not have authorization to access specific privileged resource(s), or does not include any form of authentication while requesting some privileged resource(s)."
            },
            "AuthorizedAccessToResource": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AuthorizedAccess"
                        }
                    }
                },
                "description": "Normal response. Sends an AuthorizedAccess object with an array of available and permitted actions."
            },
            "AuthorizedAccessToRoutes": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AuthorizedAccess"
                        }
                    }
                },
                "description": "Normal response. Sends an array of API routes available for use from a parent path."
            },
            "NotFound": {
                "description": "Non-erroneous, empty response which indicates that no data matched the provided criteria."
            },
            "Empty": {
                "description": "Normal response which indicates everything went right (after successfully altering data, for example) and that there's no additional information to be included."
            },
            "AllowMethodPOST": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the POST method is allowed."
            },
            "AllowMethodGET": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET method is allowed."
            },
            "AllowAllMethods": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that the methods GET, POST PUT and DELETE are allowed."
            },
            "AllowMethodGET-PUT": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET and PUT methods are allowed."
            },
            "BadRequestBody": {
                "description": "Erroneous response, sent when the request does not meet certain expectations. This probably because required properties were not included in the request body, or because certain data constraints (duplicate code numbers, for example) were not met."
            }
        },
        "securitySchemes": {
            "AuthorizedRequest": {
                "scheme": "bearer",
                "type": "http",
                "description": "Requests including a Bearer token in their Authorization header."
            }
        }
    },
    "security": [
        {}
    ],
    "servers": [
      {
        "url": "{protocol}://{host}:{port}{basePath}",
        "description": "Any server",
        "variables": {
          "protocol": {
            "default": "https",
            "description": "http or https. https is ideal"
          },
          "host": {
            "default": "localhost",
            "description": "The fully qualified domain name for the server, e.g. my-app.us-east-1.aws.amazon.com"
          },
          "port": {
            "enum": [
              "443"
            ],
            "default": "443",
            "description": "The port that the server listens to for incoming requests"
          },
          "basePath": {
            "default": "",
            "description": "The base path that the API is served to. Must not end with a slash (/)"
          }
        }
      }
    ]
}
