{
    "openapi": "3.0.1",
    "info": {
        "title": "Trébol API",
        "version": "2.7.9",
        "description": "A collection of resources that the Trébol backend exposes to interact with.",
        "contact": {
            "name": "Benjamin La Madrid",
            "email": "bg.lamadrid@gmail.com"
        },
        "license": {
            "name": "GNU GPLv3",
            "url": "https://www.gnu.org/licenses/gpl.txt"
        }
    },
    "paths": {
        "/access/products": {
            "summary": "Allowed (authorized) access to products API",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToSingleRoute"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-products-actions-get",
                "summary": "Query allowed products API operations",
                "description": "GET actions that the current session is authorized to do using the products API."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-products-options",
                "summary": "Preflight check for products API operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access/sales": {
            "summary": "Allowed (authorized) access to sales API",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToSingleRoute"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-sales-actions-get",
                "summary": "Query allowed sales API operations",
                "description": "GET actions that the current session is authorized to do using the sales API."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-sales-actions-options",
                "summary": "Preflight check for sales API operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access/users": {
            "summary": "Allowed (authorized) access to users API",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToSingleRoute"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-users-actions-get",
                "summary": "Query allowed users API operations",
                "description": "GET actions that the current session is authorized to do using the users API."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-users-actions-options",
                "summary": "Preflight check for users API operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access/customers": {
            "summary": "Allowed (authorized) access to customers API",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToSingleRoute"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-customers-actions-get",
                "summary": "Query allowed customers API operations",
                "description": "GET actions that the current session is authorized to do using the customers API."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-customers-options",
                "summary": "Preflight check for customers API operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access/salespeople": {
            "summary": "Allowed (authorized) access to salespeople API",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToSingleRoute"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-salespeople-actions-get",
                "summary": "Query allowed salespeople API operations",
                "description": "GET actions that the current session is authorized to do using the salespeople API."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-salespeople-actions-options",
                "summary": "Preflight check for salespeople API operation accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/customers": {
            "summary": "Non-specific-customer API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Customers count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Customer sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "Customers page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Customer property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customers-get",
                "summary": "List customers",
                "description": "GET a paged collection of customers."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-customers-post",
                "summary": "Insert new customer",
                "description": "POST a new customer entity and save it to the data store"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-customers-options",
                "summary": "Preflight check for non-specific customer API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/people": {
            "summary": "People API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "People count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "People sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "People page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "People property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "access-people-get",
                "summary": "List people",
                "description": "GET a paged collection of people."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "access-people-options",
                "summary": "Preflight check for people API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/products": {
            "summary": "Non-specific-product API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Products count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Product sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "Products page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Product property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-products-get",
                "summary": "List products",
                "description": "GET a paged collection of products."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-products-post",
                "summary": "Insert new product",
                "description": "POST a new product entity and save it to the data store"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-products-options",
                "summary": "Preflight check for non-specific product API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/sales": {
            "summary": "Non-specific-sell API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Sales count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Sell sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "Sales page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Sell property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-sales-get",
                "summary": "List sales",
                "description": "GET a paged collection of sales."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-sales-post",
                "summary": "Insert new sell",
                "description": "POST a new sell entity and save it to the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-sales-options",
                "summary": "Preflight check for non-specific sell API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/users": {
            "summary": "Non-specific-user API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Users count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "User sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "Users page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "User property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-users-get",
                "summary": "List users",
                "description": "GET a paged collection of users."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-users-post",
                "summary": "Insert new user",
                "description": "POST a new user entity and save it to the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-users-options",
                "summary": "Preflight check for non-specific user API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/images": {
            "summary": "Non-specific-image API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Images count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "page",
                        "description": "Images page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-images-get",
                "summary": "List images",
                "description": "GET a paged collection of customers."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Image"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-images-post",
                "summary": "Insert a new image",
                "description": "POST a new image entity and save it to the data store"
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-images-options",
                "summary": "Preflight check for non-specific image API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/user_roles": {
            "summary": "User roles API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleUserRoles"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-user-roles-get",
                "summary": "List all user roles",
                "description": "GET every user role available."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "data-user-roles-options",
                "summary": "Preflight check for user roles API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/about": {
            "summary": "Info on the shop",
            "description": "Public resource for general information about the company behind the shop.",
            "get": {
                "tags": [
                    "fetch",
                    "metadata"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShopOwnerDetails"
                                }
                            }
                        },
                        "description": "Normal response. Sends an object containing information about the shop."
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "metadata-get",
                "summary": "Request info on the shop",
                "description": "GET general information regarding the company behind the shop."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "metadata-options",
                "summary": "Preflight check for shop information",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/categories": {
            "summary": "Product main categories",
            "description": "",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleProductCategories"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "categories-get",
                "summary": "List product main categories",
                "description": "GET the main (bigger) categories where to browse the products available for sale at the shop."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "categories-options",
                "summary": "Preflight check for product categories",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/checkout": {
            "summary": "Payment request",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CartDetail"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "transaction"
                ],
                "parameters": [
                    {
                        "examples": {
                            "Webpay": {
                                "value": "\"webpay\""
                            }
                        },
                        "name": "method",
                        "description": "The payment method requested by the user.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentRedirection"
                                }
                            }
                        },
                        "description": "Normal response. The transaction was acknowledged and initiated. Details to redirect towards the payment page are included."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "checkout-request",
                "summary": "Send a payment request",
                "description": "POST cart details to initiate a virtual transaction in the shop."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "checkout-options",
                "summary": "Preflight check for payment request",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/checkout/validate": {
            "summary": "Payment confirmation for a 'Pending' transaction.",
            "post": {
                "tags": [
                    "transaction"
                ],
                "responses": {
                    "303": {
                        "description": "Normal, empty response, sent when the transaction was approved. Redirects the user.\n\n'Location' response header should be included with a URL to the result page."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "validate-checkout-request",
                "summary": "Send payment result",
                "description": "POST response from the payment method to confirm the transaction end result."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "validate-checkout-options",
                "summary": "Preflight check for payment confirmation",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/customers/{idCard}": {
            "summary": "Specific-customer API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleCustomer"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "data-customer-get",
                "summary": "Find specific customer",
                "description": "GET the customer identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-customer-put",
                "summary": "Update specific customer",
                "description": "PUT changes to the customer identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-customer-delete",
                "summary": "Delete specific customer",
                "description": "DELETE a customer with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-customer-options",
                "summary": "Preflight check for specific-customer API endpoint",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "idCard",
                    "description": "The unique ID card number of the customer.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/images/{code}": {
            "summary": "Specific-image API endpoint",
            "description": "",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleImage"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-image-get",
                "summary": "Find specific Image",
                "description": "GET the image identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Image"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-image-put",
                "summary": "Update specific Image",
                "description": "PUT changes to the image identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-image-delete",
                "summary": "Delete specific Image",
                "description": "DELETE an image with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-image-options",
                "summary": "Preflight check for specific-image API endpoint",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "A unique identifier for a `Image`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/receipt/{code}": {
            "summary": "Fetch details about a transaction",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleReceipt"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "store-receipt-request",
                "summary": "Find specific transaction receipt",
                "description": "GET complete public information about a transaction, matched by its ID, code, or whatever unique property is used to identify it."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "store-receipt-options",
                "summary": "Preflight check for specific transaction receipt",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "The transaction identifier",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/categories/{code}": {
            "summary": "Product subcategories within specific main category",
            "description": "",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleProductCategories"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "category-get",
                "summary": "Find and list product subcategories within specific main category",
                "description": "GET the subcategories found within the provided main category ID."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "category-options",
                "summary": "Preflight check for product subcategories",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "The main category identifier",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/users/{name}": {
            "summary": "Specific-user API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleUser"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-user-get",
                "summary": "Find specific user",
                "description": "GET the user identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-user-put",
                "summary": "Update specific user",
                "description": "PUT changes to the user identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-user-delete",
                "summary": "Delete specific user",
                "description": "DELETE a user with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-user-options",
                "summary": "Preflight check for specific-user API endpoint",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "name",
                    "description": "The name of the user.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/salespeople": {
            "summary": "Non-specific-salesperson API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "parameters": [
                    {
                        "name": "items",
                        "description": "Salespersons count per page",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "examples": {
                            "Ascending order": {
                                "value": "\"asc\""
                            },
                            "Descending order": {
                                "value": "\"desc\""
                            }
                        },
                        "name": "order",
                        "description": "Salesperson sort order (ascending or descending)",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "page",
                        "description": "Salespersons page number (1-based)",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Salesperson property to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-salespeople-get",
                "summary": "List salespeople",
                "description": "GET a paged collection of salespeople."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Salesperson"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "create",
                    "new",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-salespeople-post",
                "summary": "Insert new salesperson",
                "description": "POST a new salesperson entity and save it to the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-POST"
                    }
                },
                "operationId": "data-salespeople-options",
                "summary": "Preflight check for non-specific salesperson API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/salespeople/{idCard}": {
            "summary": "Specific-salesperson API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleSalesperson"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-salesperson-get",
                "summary": "Find specific salesperson",
                "description": "GET the salesperson identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Salesperson"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-salesperson-put",
                "summary": "Update specific salesperson",
                "description": "PUT changes to the salesperson identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-salesperson-delete",
                "summary": "Delete specific salesperson",
                "description": "DELETE a salesperson with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-salesperson-options",
                "summary": "Preflight check for specific-salesperson API endpoint",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "idCard",
                    "description": "The unique ID card number of the salesperson.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/sales/{buyOrder}": {
            "summary": "Specific-sell API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleSell"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-sell-get",
                "summary": "Find specific sell",
                "description": "GET the sell identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sell"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-sell-put",
                "summary": "Update specific sell",
                "description": "PUT changes to the sell identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-sell-delete",
                "summary": "Delete specific sell",
                "description": "DELETE a sell with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-sell-options",
                "summary": "Preflight check for specific-sell API endpoint",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "buyOrder",
                    "description": "The unique identifier of the sell.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/products/{code}": {
            "summary": "Specific-product API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleProduct"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-product-get",
                "summary": "Find specific product",
                "description": "GET the product identified by a provided id parameter in the route path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-product-put",
                "summary": "Update specific product",
                "description": "PUT changes to the product identified by a provided id parameter in the route path."
            },
            "delete": {
                "tags": [
                    "remove",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-product-delete",
                "summary": "Delete specific product",
                "description": "DELETE a product with the id parameter, from the data store."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT-DELETE"
                    }
                },
                "operationId": "data-product-options",
                "summary": "Preflight check for specific-product API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "A unique code for a Product.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/data/product_categories": {
            "summary": "Root product categories API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleProductCategories"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-product-categories-get",
                "summary": "List all first-level product categories",
                "description": "GET every product category available without a parent set."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "data-product-categories-options",
                "summary": "Preflight check for root product categories API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/product_categories/{code}": {
            "summary": "Children product categories API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleProductCategories"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-child-product-categories-get",
                "summary": "List children product categories",
                "description": "GET every category that is a child of the one identified by the provided code."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "data-child-product-categories-options",
                "summary": "Preflight check for children product categories API",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "A unique identifier for a (presumably) parent product category.",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/products": {
            "summary": "Products available for sale",
            "description": "",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PaginatedCollection"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "store-front-request",
                "summary": "List available products",
                "description": "GET all products currently on sale at the shop. May accept sorting, ordering, paging and filtering conditions in query parameters."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "store-front-options",
                "summary": "Preflight check for available products",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "page",
                    "description": "Products page number (1-based)",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query",
                    "required": false
                },
                {
                    "name": "items",
                    "description": "Products count per page",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "examples": {
                        "Sort by name": {
                            "value": "\"name\""
                        },
                        "Sort by barcode": {
                            "value": "\"barcode\""
                        },
                        "Sort by price": {
                            "value": "\"price\""
                        }
                    },
                    "name": "sortBy",
                    "description": "Product property to sort by",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query",
                    "required": false
                },
                {
                    "examples": {
                        "Ascending order": {
                            "value": "\"asc\""
                        },
                        "Descending order": {
                            "value": "\"desc\""
                        }
                    },
                    "name": "order",
                    "description": "Product sort order (ascending or descending)",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/public/products/{code}": {
            "summary": "Find specific product",
            "description": "",
            "get": {
                "tags": [
                    "fetch",
                    "existing",
                    "one"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SingleProduct"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "store-product-request",
                "summary": "Find specific product",
                "description": "GET complete public information about a specific product."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "store-product-options",
                "summary": "Preflight check for specific product",
                "description": "Fetch OPTIONS for communicating with this resource."
            },
            "parameters": [
                {
                    "name": "code",
                    "description": "The unique product identifier",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/account/logout": {
            "summary": "Session closer",
            "post": {
                "tags": [
                    "account",
                    "session"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "403": {
                        "headers": {
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Erroneous, empty response to improper use; the user is not logged in or its token was already terminated."
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "logout-request",
                "summary": "Terminate current session",
                "description": "POST a request to close the currently opened session."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "logout-options",
                "summary": "Preflight check for session closer",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/account/profile": {
            "summary": "User profile information",
            "get": {
                "tags": [
                    "fetch",
                    "account"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SinglePerson"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "profile-get",
                "summary": "Fetch current user's profile",
                "description": "GET the current user's stored profile information"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "update",
                    "account"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "profile-put",
                "summary": "Update current user's profile",
                "description": "PUT changes into the current user's profile information."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET-PUT"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "profile-options",
                "summary": "Preflight check for user profile information",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/guest": {
            "summary": "Guest session opener",
            "description": "",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "session"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "Authorization": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Normal response; a guest token was generated. It is included in the response headers and body."
                    },
                    "403": {
                        "headers": {
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Erroneous, empty response to improper use; the user was already logged in or using a valid guest token."
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "guest-session-request",
                "summary": "Start a guest session",
                "description": "POST personal information to generate a token for a temporary guest session."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "guest-session-options",
                "summary": "Preflight check for guest session opener",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/login": {
            "summary": "Session opener",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginCredentials"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "account",
                    "session"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "Authorization": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Normal response; the credentials are correct, and an authorization token was generated. It is included in the response headers and body."
                    },
                    "403": {
                        "headers": {
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Erroneous, empty response, sent when the credentials are rejected."
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "login-request",
                "summary": "Start a logged-in session",
                "description": "POST credentials to authenticate, generate an authorization token and start a new session."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "login-options",
                "summary": "Preflight check for session opener",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/public/register": {
            "summary": "Account registrar",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "account"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "Authorization": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "X-Requested-With": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Origin": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Methods": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Access-Control-Allow-Headers": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Normal, empty response; sent when the registration is succesful and the user account is created. The user should proceed log in with the same input credentials."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestBody"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "register-request",
                "summary": "Request a new user account",
                "description": "POST details for a new user account, including its profile information."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodPOST"
                    }
                },
                "operationId": "register-options",
                "summary": "Preflight check for account registrar",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/access": {
            "summary": "Allowed (authorized) access to API routes",
            "get": {
                "tags": [
                    "authorization"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AuthorizedAccessToRoutes"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-routes-get",
                "summary": "Query allowed API routes",
                "description": "GET the API resource paths that the current session is authorized to use."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "security": [
                    {
                        "AuthorizedRequest": []
                    }
                ],
                "operationId": "access-routes-options",
                "summary": "Preflight check for API resource accesses",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        },
        "/data/billing_types": {
            "summary": "Billing types API endpoint",
            "get": {
                "tags": [
                    "fetch",
                    "many",
                    "existing"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MultipleBillingTypes"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/UnknownError"
                    }
                },
                "operationId": "data-billing-types-get",
                "summary": "List all billing types",
                "description": "GET every billing type available."
            },
            "options": {
                "tags": [
                    "preflight"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/AllowMethodGET"
                    }
                },
                "operationId": "data-billing-types-options",
                "summary": "Preflight check for billing types API",
                "description": "Fetch OPTIONS for communicating with this resource."
            }
        }
    },
    "components": {
        "schemas": {
            "LoginCredentials": {
                "title": "Root Type for LoginCredentials",
                "description": "Data sent by an user to authenticate themselves.",
                "required": [
                    "name",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The user name.",
                        "type": "string"
                    },
                    "password": {
                        "description": "The user password.",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "an username",
                    "password": "a password"
                }
            },
            "Person": {
                "title": "Root Type for Person",
                "description": "Personal information about an individual.",
                "required": [],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The full name of the individual.",
                        "type": "string"
                    },
                    "idCard": {
                        "description": "The national identification number as issued by the individual's birth country government.",
                        "type": "string"
                    },
                    "email": {
                        "description": "The e-mail address.",
                        "type": "string"
                    },
                    "phone1": {
                        "description": "The phone number",
                        "pattern": "^(\\\\((\\\\+)?[0-9]{3}\\\\))?[0-9]{3,4}[ -]?[0-9]{4}$",
                        "type": "string"
                    },
                    "phone2": {
                        "description": "A second phone number (without pluses or parentheses)",
                        "pattern": "^(\\\\((\\\\+)?[0-9]{3}\\\\))?[0-9]{3,4}[ -]?[0-9]{4}$",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "some text",
                    "idCard": "some text",
                    "email": "some text",
                    "phone1": "some text",
                    "phone2": "some text"
                }
            },
            "UserRegistration": {
                "title": "Root Type for UserRegistration",
                "description": "Credentials and personal information for a new user account.",
                "required": [
                    "password",
                    "profile",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "example": {
                    "password": "some text",
                    "profile": {
                        "name": "some text",
                        "idCard": "some text",
                        "email": "some text",
                        "phone1": "some text",
                        "phone2": "some text"
                    },
                    "name": "some text"
                }
            },
            "CartDetail": {
                "title": "Root Type for CartDetail",
                "description": "Representation of data about a single product within a shopping cart.",
                "required": [
                    "units",
                    "product"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product",
                        "description": "The related product."
                    },
                    "units": {
                        "description": "The amount, or quantity of the related product.",
                        "type": "integer"
                    }
                },
                "example": {
                    "product": {
                        "name": "example product",
                        "barcode": "EXMPL000001",
                        "price": 1000
                    },
                    "units": 1
                }
            },
            "Image": {
                "title": "Root Type for Image",
                "description": "A reference to an image that can be found following a given URL.",
                "type": "object",
                "properties": {
                    "filename": {
                        "description": "The file name of the image.",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL to find the image at.",
                        "type": "string"
                    },
                    "code": {
                        "description": "Unique identifier of the image. Allows URL-compatible characters only."
                    }
                },
                "example": {
                    "filename": "test.png",
                    "url": "http://localhost:80/examplePath"
                }
            },
            "PaymentRedirection": {
                "title": "Root Type for PaymentRedirection",
                "description": "Metadata used to redirect the user towards a payment method.",
                "required": [
                    "url",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "description": "The url to access the payment service and undergo the transaction process.",
                        "type": "string"
                    },
                    "token": {
                        "description": "A secret code that the external payment service will use to identify the transaction.",
                        "type": "string"
                    }
                },
                "example": {
                    "url": "https://payment.com",
                    "token_ws": "a.token.that.the.payment.method.created.and.recognizes"
                }
            },
            "Product": {
                "title": "Root Type for product",
                "description": "A physical item or a service that the shop offers to the public.",
                "required": [],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The given name of the product.",
                        "type": "string"
                    },
                    "barcode": {
                        "description": "A unique identifier for the product. Normally issued by an external ERP service.",
                        "type": "string"
                    },
                    "price": {
                        "description": "The price of the product, valued by the store's local currency.",
                        "type": "number"
                    },
                    "images": {
                        "description": "A list of images that illustrate this product.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Image"
                        }
                    },
                    "code": {
                        "description": "A unique identifier for the product. Read-only after creation.",
                        "type": "string"
                    },
                    "category": {
                        "$ref": "#/components/schemas/ProductCategory",
                        "description": "The category the product is associated to."
                    }
                },
                "example": {
                    "name": "example product",
                    "barcode": "EXMPL00001",
                    "productType": {
                        "name": "example product category"
                    },
                    "price": 1000,
                    "images": [
                        {
                            "url": "http://placeholder.org/example_photo.jpg",
                            "filename": "example_photo.jpg"
                        },
                        {
                            "url": "https://cdn.org/example_hash_uri",
                            "filename": "second_example.png"
                        }
                    ]
                }
            },
            "Receipt": {
                "title": "Root Type for Receipt",
                "description": "Metadata about an existing transaction.",
                "required": [],
                "type": "object",
                "properties": {
                    "buyOrder": {
                        "format": "int32",
                        "description": "The unique identifier for the transaction.",
                        "type": "integer"
                    },
                    "amount": {
                        "format": "int32",
                        "description": "The total value paid in the receipt.",
                        "type": "integer"
                    },
                    "status": {
                        "description": "The current status of the transaction.",
                        "type": "string"
                    },
                    "date": {
                        "format": "date",
                        "description": "The hour and date that the transaction was confirmed.",
                        "type": "string"
                    },
                    "details": {
                        "description": "A list that provides full information about the acquired products or services.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptDetail"
                        }
                    }
                },
                "example": {
                    "buyOrder": 1,
                    "amount": 10000,
                    "status": "delivered",
                    "date": "2020-12-25",
                    "details": [
                        {
                            "product": {
                                "name": "example product",
                                "price": 5000
                            },
                            "units": 2
                        }
                    ]
                }
            },
            "ReceiptDetail": {
                "title": "Root Type for CartDetail",
                "description": "Part of a receipt's contents, related to a given Product.",
                "required": [
                    "units",
                    "product"
                ],
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product",
                        "description": "The related product."
                    },
                    "units": {
                        "description": "The amount or quantity of the given product.",
                        "type": "integer"
                    }
                },
                "example": {
                    "product": {
                        "name": "example product",
                        "barcode": "EXMPL000001",
                        "price": 1000
                    },
                    "units": 1
                }
            },
            "ShopOwnerDetails": {
                "title": "Root Type for ShopOwnerDetails",
                "description": "Representation of data about the shop owner - be it an individual or an organization.",
                "required": [
                    "name",
                    "logoImageURL"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "bannerImageURL": {
                        "type": "string"
                    },
                    "logoImageURL": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "example shop owner details",
                    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse arcu eros, semper id interdum ut, molestie ut ex. Nulla lobortis viverra tempor.",
                    "bannerImageURL": "https://example.com/banner.jpg",
                    "logoImageURL": "https://example.com/logo.jpg"
                }
            },
            "Customer": {
                "title": "Root Type for Customer",
                "description": "Store customers. They directly relate to Person's in a one-to-one relationship.",
                "required": [],
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "example": {
                    "person": {
                        "name": "some text",
                        "idCard": "some text",
                        "email": "some text",
                        "phone1": "some text",
                        "phone2": "some text"
                    }
                }
            },
            "Salesperson": {
                "title": "Root Type for Salesperson",
                "description": "Store vendors/workers. Like Customers, they relate to Person's in a one-to-one relationship they could, but should not collide.",
                "required": [],
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/Person",
                        "description": "The person this salesperson \"is\"."
                    }
                },
                "example": {
                    "person": {
                        "name": "some text",
                        "idCard": "some text",
                        "email": "some text",
                        "phone1": "some text",
                        "phone2": "some text"
                    }
                }
            },
            "SellDetail": {
                "title": "Root Type for SellDetail",
                "description": "Representation of data about a single product within a single sell.",
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "units": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "example": {
                    "product": {
                        "name": "example product",
                        "barcode": "EXMPL000001",
                        "price": 1000
                    },
                    "units": 1
                }
            },
            "Sell": {
                "title": "Root Type for Sell",
                "description": "",
                "required": [
                    "paymentType",
                    "date"
                ],
                "type": "object",
                "properties": {
                    "details": {
                        "description": "A list that provides full information about the acquired products or services.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SellDetail"
                        }
                    },
                    "billingType": {
                        "description": "The name of the chosen method for generating a bill of the sell.",
                        "type": "string"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The address designated to bill."
                    },
                    "shippingAddress": {
                        "$ref": "#/components/schemas/Address",
                        "description": "The address designated to ship."
                    },
                    "shipper": {
                        "$ref": "#/components/schemas/Shipper",
                        "description": "The shipper that was chosen."
                    },
                    "date": {
                        "format": "date-time",
                        "description": "(UTC) The date and time that the transaction was acknowledged.",
                        "type": "string"
                    },
                    "paymentType": {
                        "$ref": "#/components/schemas/PaymentType",
                        "description": "The selected method for payment for this transaction."
                    },
                    "salesperson": {
                        "$ref": "#/components/schemas/Salesperson",
                        "description": "The employee that authorized the sell."
                    },
                    "billingCompany": {
                        "$ref": "#/components/schemas/BillingCompany",
                        "description": "The company that will pay the bill."
                    },
                    "netValue": {
                        "description": "The total value derived from the products included at the moment of transaction.",
                        "type": "number"
                    },
                    "status": {
                        "description": "The step that the transaction is in.",
                        "type": "string"
                    }
                },
                "example": {
                    "details": [
                        {
                            "product": {
                                "barcode": "some text"
                            },
                            "units": 42
                        }
                    ],
                    "billingType": "some text",
                    "billingAddress": {
                        "firstLine": "some text",
                        "secondLine": "some text",
                        "city": "some text",
                        "municipality": "some text",
                        "postalCode": "some text",
                        "notes": "some text"
                    },
                    "billingCompany": {
                        "idNumber": "some text",
                        "name": "some text"
                    },
                    "netValue": 549.99,
                    "shippingAddress": {
                        "firstLine": "some text",
                        "secondLine": "some text",
                        "city": "some text",
                        "municipality": "some text",
                        "postalCode": "some text",
                        "notes": "some text"
                    },
                    "shipper": {
                        "person": {
                            "idCard": "some text"
                        }
                    },
                    "status": "Pending",
                    "date": "2018-02-10T09:30Z",
                    "paymentType": {
                        "name": "some text"
                    },
                    "salesperson": {
                        "person": {
                            "idCard": "some text"
                        }
                    }
                }
            },
            "User": {
                "title": "Root Type for User",
                "description": "A representation of data for users of the application that consumes the entire API.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "A unique name that the user logs in with.",
                        "type": "string"
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person",
                        "description": "The person this user \"is\"."
                    }
                },
                "example": {
                    "name": "an username",
                    "person": {
                        "idCard": "xxxxxxxx"
                    }
                }
            },
            "UserRole": {
                "title": "Root Type for UserRole",
                "description": "A role that holds a list of permissions to do certain tasks in the application ",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "example role",
                    "description": "this role has access to read most data, excepting users"
                }
            },
            "AuthorizedAccess": {
                "title": "Root Type for AuthorizedAcess",
                "description": "A generic container of API resource paths or actions on a specific resource, for which access is granted",
                "type": "object",
                "properties": {
                    "routes": {
                        "description": "A list of authorized routes to consume.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "permissions": {
                        "description": "A list of authorized actions for a specific route.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "routes": [
                        "clients",
                        "products",
                        "people",
                        "sales",
                        "salespeople",
                        "users"
                    ]
                }
            },
            "ProductCategory": {
                "title": "Root Type for ProductFamily",
                "description": "A Product group/category. Each one can be divided into smaller subsets (ProductType).",
                "required": [],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name displayed for the category.",
                        "type": "string"
                    },
                    "code": {
                        "description": "A unique identifier for the category.",
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/ProductCategory",
                        "description": "A category existing one level above the current."
                    }
                },
                "example": {
                    "code": "EXPL",
                    "name": "example category"
                }
            },
            "DataPage": {
                "description": "A pageable representation of data.",
                "type": "object",
                "properties": {
                    "items": {
                        "description": "The contents of the page.",
                        "type": "array",
                        "items": {}
                    },
                    "pageIndex": {
                        "description": "The index of the page (0-based)",
                        "type": "integer"
                    },
                    "totalCount": {
                        "description": "The total amount of items matched under the same search criteria used to fetch the current page.",
                        "type": "integer"
                    },
                    "pageSize": {
                        "description": "The amount of items requested and (presumably) contained in the page.",
                        "type": "integer"
                    }
                },
                "example": {
                    "items": [
                        {
                            "name": "example product",
                            "code": "EXMPL001"
                        },
                        {
                            "name": "example product 2",
                            "code": "EXMPL002"
                        }
                    ],
                    "pageIndex": 2,
                    "totalCount": 32,
                    "pageSize": 15
                }
            },
            "EmptyObject": {
                "description": "An object without properties.",
                "type": "object"
            },
            "Address": {
                "title": "Root Type for Address",
                "description": "Information about a physical address.",
                "type": "object",
                "properties": {
                    "firstLine": {
                        "description": "The main line of address.",
                        "type": "string"
                    },
                    "secondLine": {
                        "description": "Further information of the address, such as apartment or office.",
                        "type": "string"
                    },
                    "city": {
                        "description": "The name of the city where the address is located.",
                        "type": "string"
                    },
                    "municipality": {
                        "description": "The province where the address is located.",
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "Sometimes called ZIP.",
                        "type": "string"
                    },
                    "notes": {
                        "description": "Extra bits of information or comments. Mostly helpful to Shippers.",
                        "type": "string"
                    }
                },
                "example": {
                    "firstLine": "first line test",
                    "secondLine": "second line test",
                    "city": "city example",
                    "municipality": "municipality example",
                    "postalCode": "postal code test",
                    "notes": "lorem ipsum"
                }
            },
            "BillingCompany": {
                "title": "Root Type for BillingCompany",
                "description": "A company or similar organization, enabled to pay taxes.",
                "type": "object",
                "properties": {
                    "idNumber": {
                        "description": "The national identification number for the company.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the organization.",
                        "type": "string"
                    }
                },
                "example": {
                    "idNumber": "some text",
                    "name": "some text"
                }
            },
            "Shipper": {
                "title": "Root Type for Shipper",
                "description": "",
                "required": [
                    "person"
                ],
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "example": {
                    "person": {
                        "name": "some text",
                        "idCard": "some text",
                        "email": "some text",
                        "phone1": "some text",
                        "phone2": "some text"
                    }
                }
            },
            "SellStatus": {
                "title": "Root Type for SellStatus",
                "description": "",
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "example": {
                    "code": "-1",
                    "name": "invalid"
                }
            },
            "PaymentType": {
                "title": "Root Type for PaymentType",
                "description": "Designates the method that the customer used to pay their bill.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name given to this payment type.",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "Enterprise Invoice"
                }
            },
            "BillingType": {
                "title": "Root Type for ProductType",
                "description": "Dictates taxes to be applied to a given Sell.",
                "required": [],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name given to this billing type.",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "Enterprise Invoice"
                }
            }
        },
        "responses": {
            "PaginatedCollection": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DataPage"
                        }
                    }
                },
                "description": "Normal response for most \"/data\" methods; sends items in an array, along with pagination metadata."
            },
            "Forbidden": {
                "description": "Erroneous, empty response for requests not meeting security requirements. Most likely, it does not have authorization to access specific privileged resource(s), or does not include any form of authentication while requesting some privileged resource(s)."
            },
            "UnknownError": {
                "description": "Erroneous response sent when the API server is having a general malfunction or is unavailable."
            },
            "AuthorizedAccessToSingleRoute": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AuthorizedAccess"
                        }
                    }
                },
                "description": "Normal response. Sends an AuthorizedAccess object with an array of available and permitted actions."
            },
            "AuthorizedAccessToRoutes": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AuthorizedAccess"
                        }
                    }
                },
                "description": "Normal response. Sends an array of API routes available for use from a parent path."
            },
            "NotFound": {
                "description": "Non-erroneous, empty response which indicates that no data matched the provided criteria."
            },
            "Empty": {
                "description": "Normal response which indicates everything went right (after successfully altering data, for example) and that there's no additional information to be included."
            },
            "AllowMethodPOST": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the POST method is allowed."
            },
            "AllowMethodGET": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET method is allowed."
            },
            "AllowMethodGET-POST": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET and POST methods are allowed."
            },
            "AllowAllMethods": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that the methods GET, POST PUT and DELETE are allowed."
            },
            "AllowMethodGET-PUT": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET and PUT methods are allowed."
            },
            "AllowMethodGET-PUT-DELETE": {
                "description": "Normal, empty response to some OPTIONS requests. Should include CORS headers and indicate that only the GET, PUT and DELETE methods are allowed."
            },
            "BadRequestBody": {
                "description": "Erroneous response, sent when the request does not meet certain expectations. This probably because required properties were not included in the request body, or because certain data constraints (duplicate code numbers, for example) were not met."
            },
            "SingleProduct": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Product"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual product."
            },
            "SingleSell": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Sell"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual sell."
            },
            "SingleReceipt": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Receipt"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual transaction receipt."
            },
            "MultipleProductCategories": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ProductCategory"
                            }
                        }
                    }
                },
                "description": "Normal response, sends an array of product categories."
            },
            "MultipleUserRoles": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserRole"
                            }
                        }
                    }
                },
                "description": "Normal response, sends an array of user roles."
            },
            "SingleImage": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Image"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual image."
            },
            "SingleCustomer": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Customer"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual customer."
            },
            "SingleSalesperson": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Salesperson"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual salesperson."
            },
            "SingleUser": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual user."
            },
            "SinglePerson": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Person"
                        }
                    }
                },
                "description": "Normal response, sends an object representation of an individual person."
            },
            "MultipleBillingTypes": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/BillingType"
                            }
                        }
                    }
                },
                "description": "Normal response, sends an array of user roles."
            }
        },
        "securitySchemes": {
            "AuthorizedRequest": {
                "scheme": "bearer",
                "type": "http",
                "description": "Requests including a Bearer token in their Authorization header."
            }
        }
    },
    "security": [
        {}
    ]
}
